(dp1
S'output'
p2
S''
sS'layer'
p3
S'D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/mcrud.py'
p4
sS'code'
p5
S"# coding: utf8\n# try something like\n\ndef url(f,args=[]): return URL(r=request,f=f,args=args)\n\ndef button(text,action,args=[]):\n    return SPAN('[',A(text,_href=URL(r=request,f=action,args=args)),']')\n\n@auth.requires_login()\n# Cadastra e Lista tabela simples\ndef cadlist():\n    try:\n        tabela=request.args(0) or redirect(URL(r=request,f='../default/error'))\n        form=crud.create(db[tabela])\n        if form.accepts(request.vars,session): \n            redirect(URL(r=request,f='cadlist/' + tabela))\n        elif form.errors: response.flash='Erro em seu formul\xc3\xa1rio'\n        row_admins=db(db.administrador.usuario==auth.user.id).select(db.administrador.ALL)\n        row_professor=db(db.professor.usuario==auth.user.id).select(db.professor.ALL)\n        # aqui no if somente as tabelas que tem um select especial valeu\n        if tabela == 'aluno':\n            if row_professor:\n                registros=db(db.aluno.matricula>0).select(\n                    db.aluno.matricula,\n                    db.aluno.usuario,\n                    db.aluno.id,\n                    db.auth_user.ALL,\n                    left=db.auth_user.on(db.aluno.usuario==db.auth_user.id),\n                orderby=db.aluno.matricula\n                )\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n        elif tabela == 'professor':\n            registros=db(db.professor.id>0).select(\n                db.professor.ALL,\n                db.auth_user.ALL,\n                left=db.auth_user.on(db.professor.usuario==db.auth_user.id)\n            )\n        elif tabela == 'alocacao':\n            if row_professor:  \n                list_alunosA=db()._select(db.alocacao.aluno)\n                list_alunos=db(~db.aluno.id.belongs(list_alunosA)).select(\n                    db.aluno.ALL,\n                    db.auth_user.ALL,\n                    left=db.auth_user.on(db.aluno.usuario==db.auth_user.id)\n                )\n                list_turmas=db(db.turma.id>0).select(\n                    db.turma.ALL,\n                    db.disciplina.ALL,\n                    left=db.disciplina.on(db.turma.disciplina==db.disciplina.id))\n                registros=db(db.aluno.id>0).select(\n                    db.alocacao.ALL,\n                    db.auth_user.ALL,\n                    left=db.auth_user.on(db.alocacao.aluno==db.auth_user.id),distinct=True\n                )\n                response.flash='Lista ' + tabela.replace('_',' ')\n                return dict(registros=registros,form=form, tabela=tabela, list_turmas=list_turmas, list_alunos=list_alunos)\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n        elif tabela == 'disciplina':\n            if row_professor:\n                registros= disciplinas=db(db.disciplina.id>0).select(\n                    db.disciplina.ALL,\n                    db.curso.ALL,\n                    left=db.curso.on(db.disciplina.curso==db.curso.id)\n                )\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n        elif tabela == 'turma':\n            if row_professor:\n                registros=db(db.turma.id>0).select(db.turma.ALL,\n                    db.disciplina.ALL,\n                    orderby=db.turma.nome,\n                    left=db.disciplina.on(db.turma.disciplina==db.disciplina.id)\n                )\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n        elif tabela == 'plano_de_prova':\n            if row_professor:\n                registros=db(db.plano_de_prova.id>0).select(\n                    db.plano_de_prova.ALL\n                )\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n        elif tabela == 'item_plano_de_prova':\n            if row_professor:\n                if request.args(1):\n                  registros=db(db.item_plano_de_prova.id==request.args(1)).select(\n                      db.item_plano_de_prova.ALL,orderby=db.item_plano_de_prova.plano_de_prova\n                  )\n                else:\n                  registros=db(db.item_plano_de_prova.id>0).select(\n                      db.item_plano_de_prova.ALL,orderby=db.item_plano_de_prova.plano_de_prova\n                  )\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n        elif tabela == 'prova':\n            registros=db(db.prova.id>0).select(db.prova.ALL)\n            turmas=db(db.turma.id>0).select(db.turma.ALL)\n            if 'auth' in globals():\n                if auth.is_logged_in(): \n                    planoprovas=db(db.plano_de_prova.id>0).select(db.plano_de_prova.ALL,\n                        db.professor.ALL,\n                        left=db.professor.on( (db.professor.id==db.plano_de_prova.professor ) & (db.professor.usuario==auth.user.id))\n                    )\n                    response.flash='Lista Prova'\n                    return dict(registros=registros, turmas=turmas, planoprovas=planoprovas, form=form, tabela=tabela)\n                else:\n                    redirect(URL(r=request,f='../default/erro_acesso'))\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n        elif tabela == 'questao':\n               db.questao.enunciado.widget = advanced_editor\n               registros=db(db.questao.id>0).select(\n                     db.questao.ALL,\n                     db.alternativa.ALL,\n                     left=db.alternativa.on(db.questao.id==db.alternativa.questao)\n               )\n        else:\n            # esse \xc3\xa9 um select gen\xc3\xa9rico, serve para a maioria das tabelas\n            if row_admins:\n               registros=db(db[tabela].id>0).select(db[tabela].ALL)\n            else:\n               redirect(URL(r=request,f='../default/erro_admin'))\n    except KeyError, NameError:\n        tabela='error'\n        response.flash='Tabela Inexistente!'\n        form = ''\n        return dict(form=form, registros='N\xc3\xa3o posso listar esta tabela!', tabela=tabela)\n    if tabela == 'auth_user':\n        response.flash='Lista Usuario'\n    else:\n        response.flash='Lista ' + tabela.replace('_',' ')\n    return dict(registros=registros,form=form, tabela=tabela)\n\n@auth.requires_login()\n# Edita tabela simples\ndef edit():\n    #s\xc3\xb3 deixa editar se for professor\n    row_professor=db(db.professor.usuario==auth.user.id).select(db.professor.ALL)\n    if row_professor:\n        tabela=request.args(0) or redirect(URL(r=request,f='../default/error'))\n        registro_id=request.args(1) or redirect(URL(r=request,f='../default/error'))\n        registros=db[tabela][registro_id] or redirect(URL(r=request,f='../default/error'))\n    #if not registros: raise HTTP(404)\n        form=crud.update(db[tabela],registros,next=url('cadlist/'+ tabela))\n        return dict(form=form, tabela=tabela)\n    else:\n        redirect(URL(r=request,f='../default/erro_acesso'))\n\nresponse._vars=response._caller(cadlist)\n"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/mcrud.py", line 151, in <module>\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\tools.py", line 1848, in f\n    return action(*a, **b)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/mcrud.py", line 88, in cadlist\n    registros=db(db.item_plano_de_prova.id==request.args(1)).select(\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\sql.py", line 2395, in __eq__\n    return Query(self, \'=\', value)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\sql.py", line 2805, in __init__\n    right = sql_represent(right, left.type, left._db._dbname, left._db._db_codec)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\sql.py", line 505, in sql_represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'pl01\'\n'
p8
s.