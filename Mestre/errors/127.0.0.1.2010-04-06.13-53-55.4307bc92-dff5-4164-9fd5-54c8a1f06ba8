(dp1
S'output'
p2
S''
sS'layer'
p3
S'D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/aplicaprova.py'
p4
sS'code'
p5
S'# coding: utf8\n# try something like\nimport datetime\n\ndef aplicar_prova():\n #somente para teste e estudo\n if \'auth\' in globals():\n  if auth.is_logged_in():\n    #pega o Professor  \n    nome=auth.user.first_name\n    lastname=auth.user.last_name\n    idUsuario=auth.user.id\n    #testa se \xc3\xa9 um professor\n    row_professor=db(db.professor.usuario==idUsuario).select(db.professor.ALL)\n    if row_professor:\n       for pr in row_professor:\n          idProfessor=pr.id\n          codigo_funcional=pr.codigo_funcional\n    else:\n       response.flash = \'O usu\xc3\xa1rio n\xc3\xa3o \xc3\xa9 um Professor cadastrado!\'\n       aplicar_prova = FORM(TABLE(TR(\'Professor n\xc3\xa3o cadastrado, procure o Administrador!\')))\n       return dict(aplicar_prova=aplicar_prova)\n\n    #testa se o professor possue plano_de_prova criado\n    row_planodeprova = db(db.plano_de_prova.professor==idProfessor).select(db.plano_de_prova.referencia)\n    if row_planodeprova:\n            for pla in row_planodeprova:\n                idPlanodeprova=pla.id\n                refPlanodeprova=pla.referencia\n                row_prova = db(db.prova.plano_de_prova==idPlanodeprova).select(db.prova.referencia)\n                if row_prova:\n                   for pr in row_prova:\n                     refProva=pr.referencia\n    else:\n            response.flash = \'Professor n\xc3\xa3o possue plano de prova associado!\'\n            aplicar_prova = FORM(TABLE(TR(\'Professor n\xc3\xa3o possue plano de prova associado!\')))\n            return dict(aplicar_prova=aplicar_prova)\n\n    #testa se foi gerado uma prova para esse plano de prova\n    row_prova = db(db.prova.plano_de_prova==idPlanodeprova).select(db.prova.id,db.prova.referencia,db.prova.plano_de_prova)\n    if row_prova:\n            for prv in row_prova:\n                idProva=prv.id\n                prova=prv.referencia\n                idPlanoProva=prv.plano_de_prova\n    else:\n            response.flash = \'O Plano de prova n\xc3\xa3o possui uma prova relacionada!\'\n            aplicar_prova = FORM(TABLE(TR(\'O Plano de prova n\xc3\xa3o possui uma prova relacionada!\')))\n            return dict(aplicar_prova=aplicar_prova)\n\n    aplicar_prova = FORM(TABLE(\n        #certo \xc3\xa9 selecionar o aluno, sem combo\n        TR(\'Professor:\', nome + \' \'+ lastname),\n        TR(\'Codigo Funcional:\',codigo_funcional,\'Plano de Prova:\',refPlanodeprova),\n        TR(\'Prova:\',refProva),\n        #TR(\'Qual o Plano de Prova?\', SELECT([OPTION(pro.referencia,_value=pro.referencia) for pro in db().select(db.plano_de_prova.referencia,distinct=True)],_name=\'planoprova\',requires=IS_IN_DB(db,\'plano_de_prova.referencia\'))),\n        #TR(\'Qual a Prova?\', SELECT([OPTION(pr.referencia,_value=pr.referencia) for pr in db().select(db.prova.referencia,distinct=True)],_name=\'prova\',requires=IS_IN_DB(db,\'prova.referencia\'))),\n        TR(\'Aplicar Prova?\', SELECT([\'Sim\',\'N\xc3\xa3o\'],_name=\'opcao\',requires=IS_IN_SET([\'Sim\',\'N\xc3\xa3o\']))),\n        TR(INPUT(_type=\'hidden\', _name=\'PlanoProva\', _value=refPlanodeprova)),\n        TR(INPUT(_type=\'hidden\', _name=\'idProva\', _value=idProva)),\n        TR(INPUT(_type=\'hidden\', _name=\'idProfessor\', _value=idProfessor)),\n        TR(\'Para executa a a\xc3\xa7\xc3\xa3o -> \', INPUT(_type=\'submit\', _value=\'Continuar\')),\n        ))\n    if aplicar_prova.accepts(request.vars, session):\n        sopcao=aplicar_prova.vars.opcao\n        if(sopcao==\'N\xc3\xa3o\'):\n              #Escreve no banco a desist\xc3\xaancia do professor\n              response.flash = \'O Professor Desistiu da a\xc3\xa7\xc3\xa3o!\'\n              realizar_prova = FORM(TABLE(TR(\'Retorne ao menu e selecione outra atividade!\')))\n              return dict(aplicar_prova=aplicar_prova)        \n        #recupera o Plano de Prova selecionado\n        PlanoProva =  aplicar_prova.vars.PlanoProva\n        #buscar Taxionomia, Topico e Dificuldade do plano de prova\n        row_planoprova = db(db.plano_de_prova.referencia==PlanoProva).select(\n                              db.plano_de_prova.ALL, \n                              db.item_plano_de_prova.ALL,\n                              left=db.item_plano_de_prova.on(db.plano_de_prova.id==db.item_plano_de_prova.id))\n        for plpr in row_planoprova:\n          idTax = plpr.item_plano_de_prova.taxionomia\n          idTop = plpr.item_plano_de_prova.topico \n          idDif = plpr.item_plano_de_prova.dificuldade  \n          #selecionar todas as quest\xc3\xa3o que tenham como caracteristicas a Taxionomia, Topico e Dificuldade\n          row_questao=db((db.questao.topico==idTop)&(db.questao.taxionomia==idTax)&(db.questao.dificuldade==idDif)).select(db.questao.id)\n          lista_Questao = [0] *  len(row_questao)\n          i=0\n          for que in row_questao:\n              lista_Questao[i] = int(que.id)\n              i = i + 1\n              \n        realizar_prova = FORM(TABLE(TR(row_planoprova,row_questao,lista_Questao)))  #Temporariamente aqui para mostrar os resultados \n        \n        # criar o update do campo data_aplicada da tabela prova para o professor\n        response.flash = \'Prova aplicada pelo professor!\'\n    elif realizar_prova.errors:\n        response.flash = \'Formul\xc3\xa1rio Inv\xc3\xa1lido\'\n    else:\n        response.flash = \'Por favor, Verifique se seus dados est\xc3\xa3o corretos, quando estiver pronto, selecionar se quer "Realizar a Prova" e clique em "Continuar ou Iniciar a Prova" para responder as perguntas ou Desistir!\'\n    return dict(realizar_prova=realizar_prova, vars = realizar_prova.vars)    \n  else:  \n    #realizar_prova = FORM(TABLE(TR(\'Usuario n\xc3\xa3o Logado\')))        \n    #response.flash = \'Usu\xc3\xa1rio n\xc3\xa3o Logado\'\n    redirect(URL(r=request, f=\'../default/user/login\'))\n\nresponse._vars=response._caller(aplicar_prova)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/aplicaprova.py", line 104, in <module>\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/aplicaprova.py", line 28, in aplicar_prova\n    idPlanodeprova=pla.id\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\sql.py", line 667, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'id\'\n'
p8
s.