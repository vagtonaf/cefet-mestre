(dp1
S'output'
p2
S''
sS'layer'
p3
S'D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/aplicaprova.py'
p4
sS'code'
p5
S'# coding: utf8\n# try something like\nimport datetime\nimport time\ndef aplicar_prova():\n #somente para teste e estudo\n if \'auth\' in globals():\n  if auth.is_logged_in():\n    #pega o Professor  \n    nome=auth.user.first_name\n    sobrenome=auth.user.last_name\n    idUsuario=auth.user.id\n    #testa se \xc3\xa9 um professor\n    row_professor=db(db.professor.usuario==idUsuario).select(db.professor.ALL)\n    if row_professor:\n       for pr in row_professor:\n          idProfessor=pr.id\n          codigo_funcional=pr.codigo_funcional\n    else:\n       response.flash = \'O usu\xc3\xa1rio n\xc3\xa3o \xc3\xa9 um Professor cadastrado!\'\n       aplicar_prova = FORM(TABLE(TR(\'Professor n\xc3\xa3o cadastrado, procure o Administrador!\')))\n       return dict(aplicar_prova=aplicar_prova)\n\n    #testa se o professor possue plano_de_prova criado\n    row_planodeprova = db(db.plano_de_prova.professor==idProfessor).select(db.plano_de_prova.ALL)\n    if row_planodeprova:\n       n=0\n       for pla in row_planodeprova:\n           idPlanodeprova=pla.id\n           row_prova = db(db.prova.plano_de_prova==idPlanodeprova).select(db.prova.ALL)\n           for prv in row_prova:\n              idProva=prv.id\n              refProva=prv.referencia\n              n=n+1\n       if n==0:\n          response.flash = \'O Plano de prova n\xc3\xa3o possui uma prova relacionada!\'\n          aplicar_prova = FORM(TABLE(TR(\'O Plano de prova n\xc3\xa3o possui uma prova relacionada!\')))\n          return dict(aplicar_prova=aplicar_prova)\n    else:\n       response.flash = \'Professor n\xc3\xa3o possue plano de prova associado!\'\n       aplicar_prova = FORM(TABLE(TR(\'Professor n\xc3\xa3o possue plano de prova associado!\')))\n       return dict(aplicar_prova=aplicar_prova)\n    hoje = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")\n    aplicar_prova = FORM(TABLE(\n       TR(\'Professor:\', nome + \' \'+ sobrenome),\n       TR(\'Codigo Funcional:\',codigo_funcional),\n       TR(\'Qual a Prova?\', SELECT([OPTION(pr.referencia,_value=pr.referencia) for pr in db().select(db.prova.referencia,distinct=True)],_name=\'Prova\',requires=IS_IN_DB(db,\'prova.referencia\'))),\n       TR(\'Aplicar Prova?\', SELECT([\'N\xc3\xa3o\',\'Sim\'],_name=\'opcao\',requires=IS_IN_SET([\'N\xc3\xa3o\',\'Sim\']))),\n       TR(INPUT(_type=\'hidden\', _name=\'idProfessor\', _value=idProfessor)),\n       TR(INPUT(_type=\'hidden\', _name=\'data_aplicacao\', _value=hoje)),\n       TR(INPUT(_type=\'hidden\', _name=\'total_prova\', _value=n)),\n       TR(INPUT(_type=\'submit\', _value=\'Aplica\')),\n       ))\n    if aplicar_prova.accepts(request.vars, session):\n       sopcao=aplicar_prova.vars.opcao\n       if (sopcao == \'N\xc3\xa3o\'):\n          #Escreve no banco a desist\xc3\xaancia do professor\n          response.flash = \'O Professor Desistiu da a\xc3\xa7\xc3\xa3o, posso aqui retornar para o menu!\'\n          realizar_prova = FORM(TABLE(TR(\'Retorne ao menu e selecione outra atividade!\')))\n          return dict(aplicar_prova=aplicar_prova)        \n       else:\n          #recupera o Prova selecionado\n          Prova =  aplicar_prova.vars.Prova\n          row_prova = db(db.prova.referencia==Prova).select(\n                              db.prova.ALL, \n                              db.plano_de_prova.ALL, \n                              left=db.plano_de_prova.on(db.prova.plano_de_prova==db.plano_de_prova.id))\n          for plpr in row_prova:\n             idProva = plpr.prova.id\n             # criar o update do campo data_aplicada da tabela prova para o professor para cada idProva\n             plpr.update(prova.data_aplicacao = aplicar_prova.vars.data_aplicacao)\n          aplicar_prova = FORM(TABLE(\'Ainda n\xc3\xa3o faz o Update, mas sabe em quem deve colocar \' + hoje + \' no campo data_aplicacao\',TR(row_prova)))  \n        \n          response.flash = \'Prova aplicada pelo professor!\'\n    elif aplicar_prova.errors:\n          response.flash = \'Formul\xc3\xa1rio Inv\xc3\xa1lido\'\n    else:\n          response.flash = \'Professor por favor, Verifique se seus dados est\xc3\xa3o corretos, quando estiver pronto, confirme se quer "Aplicar a Prova" e clique em "Aplicar"!\'\n    return dict(aplicar_prova=aplicar_prova, vars = aplicar_prova.vars)    \n  else:  \n    #realizar_prova = FORM(TABLE(TR(\'Usuario n\xc3\xa3o Logado\')))        \n    #response.flash = \'Usu\xc3\xa1rio n\xc3\xa3o Logado\'\n    redirect(URL(r=request, f=\'../default/user/login\'))\n else:\n   #realizar_prova = FORM(TABLE(TR(\'Usuario n\xc3\xa3o Autenticado\')))        \n   #response.flash = \'Usu\xc3\xa1rio n\xc3\xa3o Autenticado\'\n   redirect(URL(r=request, f=\'../default/user/login\'))\n\nresponse._vars=response._caller(aplicar_prova)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\restricted.py", line 171, in restricted\n    ccode = compile(code.replace(\'\\r\\n\', \'\\n\'), layer, \'exec\')\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/aplicaprova.py", line 71\n    plpr.update(prova.data_aplicacao = aplicar_prova.vars.data_aplicacao)\nSyntaxError: keyword can\'t be an expression\n'
p8
s.