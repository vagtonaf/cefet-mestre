(dp1
S'output'
p2
S''
sS'layer'
p3
S'D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\applications\\Mestre/controllers/default.py'
p4
sS'code'
p5
S'# coding: utf8\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\n\nerror_page=URL(r=request,f=\'error\')\n\nif not session.recent_companies: session.recent_companies=[]\nif not session.recent_persons: session.recent_persons=[]\n\n#response.menu=[\n#  [\'Companies\',False,url(\'list_companies\')],\n#  [\'Contacts\',False,url(\'list_persons\')],\n#  [\'Tasks\',False,url(\'list_tasks\')],\n#]\n\ndef add(mylist,item):\n    if not item.id in [x[0] for x in mylist]:\n        return mylist[:9]+[(item.id,item.name)]\n    else:\n        return mylist\n        \ndef erro_acesso():\n  response.flash="S\xc3\xb3 acessado por professores valeu!"\n  form = "S\xc3\xb3 acessado por professores valeu!"\n  return dict(form=form)        \n\ndef index():\n    return dict()\n        \n@auth.requires_login()\ndef list_alunos_turma():\n    turma_id=request.args(0)\n    row_alocacao=db(db.alocacao.turma==turma_id).select(orderby=db.alocacao.aluno)\n    for alo in row_alocacao:\n        row_turmas=db(db.turma.id==alo.turma.id).select(orderby=db.turma.nome)\n        row_alunos=db(db.aluno.id==alo.aluno.id).select(orderby=db.aluno.matricula)\n        for alu in row_alunos:\n              alunos=db.aluno[alu.id] or redirect(error)  \n              db.aluno.id=alunos.id\n              db.aluno.matricula.writable=False\n              db.aluno.matricula.readable=False\n              form=crud.create(db.aluno)\n    else:\n        form=None\n        row_alunos=db(db.aluno.id>0).select(orderby=db.aluno.matricula)\n        row_turmas=db(db.turma.id>0).select(orderby=db.turma.nome)\n    return dict(alunos=row_alunos,turmas=row_turmas,form=form)\n\n@auth.requires_login()\ndef view_person():\n    person_id=request.args(0)\n    person=db.person[person_id] or redirect(error_page)    \n    session.recent_persons = add(session.recent_persons,person)\n    return dict(person=person)\n\n@auth.requires_login()\ndef list_docs():\n    person_id=request.args(0)\n    person=db.person[person_id] or redirect(error_page)    \n    session.recent_persons = add(session.recent_persons,person)\n    db.document.person.default=person.id\n    db.document.person.writable=False\n    db.document.person.readable=False\n    form=crud.create(db.document)\n    docs=db(db.document.person==person.id).select(orderby=db.document.name)\n    return dict(person=person,docs=docs,form=form)\n\n@auth.requires_login()\ndef list_logs():\n    person_id=request.args(0)\n    person=db.person[person_id] or redirect(error_page)    \n    session.recent_persons = add(session.recent_persons,person)\n    db.log.person.default=person.id\n    db.log.person.writable=False\n    db.log.person.readable=False\n    form=crud.create(db.log)\n    logs=db(db.log.person==person.id).select(orderby=~db.log.created_on)\n    return dict(person=person,logs=logs,form=form)\n\n@auth.requires_login()\ndef edit_person():\n    person_id=request.args(0)\n    person=db.person[person_id] or redirect(error_page)\n    session.recent_persons = add(session.recent_persons,person)\n    db.person.company.writable=False\n    db.person.company.readable=False\n    form=crud.update(db.person,person,next=url(\'view_person\',person_id))\n    return dict(form=form)\n    \n\n@auth.requires_login()\ndef edit_task():\n    task_id=request.args(0)\n    task=db.task[task_id] or redirect(error_page)\n    person=db.person[task.person]\n    db.task.person.writable=db.task.person.readable=False\n    form=crud.update(db.task,task,next=\'view_task/[id]\')\n    return dict(form=form, person=person)   \n    \n@auth.requires_login()\ndef view_task():    \n    task_id=request.args(0)\n    task=db.task[task_id] or redirect(error_page)\n    person=db.person[task.person]\n    db.task.person.writable=db.task.person.readable=False\n    form=crud.read(db.task,task)\n    return dict(form=form, person=person, task=task)   \n    \n@auth.requires_login()\ndef list_tasks():    \n    person_id=request.args(0)\n    person=db.person[person_id]\n    if person_id:\n       tasks=db(db.task.person==person_id)\\\n               (db.task.created_by==auth.user.id)\\\n               (db.task.start_time>=request.now).select() \n    else:\n       tasks=db(db.task.created_by==auth.user.id)\\\n               (db.task.start_time>=request.now).select() \n    db.task.person.default=person_id\n    db.task.person.writable=db.task.person.readable=False\n    form=crud.create(db.task,next=\'view_task/[id]\')\n    return dict(tasks=tasks,person=person,form=form)\n    \n@auth.requires_login()\ndef calendar():\n    person_id=request.args(0)\n    person=db.person[person_id]\n    if person_id:\n       tasks=db(db.task.person==person_id)\\\n               (db.task.created_by==auth.user.id)\\\n               (db.task.start_time>=request.now).select() \n    else:\n       tasks=db(db.task.created_by==auth.user.id)\\\n               (db.task.start_time>=request.now).select() \n    return dict(tasks=tasks,person=person)    \n           \ndef error():\n    return dict(message="Algo est\xc3\xa1 errado, analise a sua solicita\xc3\xa7\xc3\xa3o!")\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\nresponse._vars=response._caller(user)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\gluon\\restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\applications\\Mestre/controllers/default.py", line 183, in <module>\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\gluon\\globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\applications\\Mestre/controllers/default.py", line 162, in user\n    return dict(form=auth())\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\gluon\\tools.py", line 721, in __call__\n    return self.logout()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\gluon\\tools.py", line 1161, in logout\n    self.log_event(log % self.user)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\gluon\\tools.py", line 890, in log_event\n    origin=origin, user_id=user_id)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\gluon\\sql.py", line 1862, in insert\n    self._db._execute(query)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100210\\web2py\\gluon\\sql.py", line 926, in <lambda>\n    self._execute = lambda *a, **b: self._cursor.execute(*a, **b)\n  File "C:\\Python26\\lib\\site-packages\\MySQLdb\\cursors.py", line 166, in execute\n    self.errorhandler(self, exc, value)\n  File "C:\\Python26\\lib\\site-packages\\MySQLdb\\connections.py", line 35, in defaulterrorhandler\n    raise errorclass, errorvalue\nIntegrityError: (1452, \'Cannot add or update a child row: a foreign key constraint fails (`mestre/auth_event`, CONSTRAINT `auth_event_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`) ON DELETE CASCADE)\')\n'
p8
s.