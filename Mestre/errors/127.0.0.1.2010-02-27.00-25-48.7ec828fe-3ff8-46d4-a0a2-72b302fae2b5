(dp1
S'output'
p2
S''
sS'layer'
p3
S'D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100223\\web2py\\applications\\Mestre/controllers/realizaprova.py'
p4
sS'code'
p5
S'# coding: utf8\n# try something like\nimport random\nimport datetime\n\ndef geraProva(lista):\n if len(lista) >= 10: \n  s = [0] * 10\n  for i in range(10):\n   while s[i]==0:\n    r = random.choice (lista)\n    t=0\n    if r in s:\n       t=1\n    if (t==0 and r<>0):\n       s[i]=r\n  s.sort()\n else:\n  s="Menos de 10 quest\xc3\xb5es" \n return s\n\n\n\ndef realizar_prova():\n #somente para teste e estudo\n if \'auth\' in globals():\n  if auth.is_logged_in():\n    #pega o Aluno  \n    nome=auth.user.first_name\n    lastname=auth.user.last_name\n    idAluno=auth.user.id\n    return dict(vars=nome.str.vars)\n    #testa se \xc3\xa9 um aluno\n    row_aluno=db(db.aluno.usuario==idAluno).select(db.aluno.matricula)\n    if row_aluno:\n       for al in row_aluno:\n          matricula=al.matricula\n    else:\n       response.flash = \'O usu\xc3\xa1rio n\xc3\xa3o \xc3\xa9 um aluno cadastrado!\'\n       realizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o cadastrado, procure seu professor!\')))\n       return dict(realizar_prova=realizar_prova)\n    #testa se tem um email cadastrado para um poss\xc3\xadvel contato\n    row_email=db(db.auth_user.id==idAluno).select(db.auth_user.email)\n    if row_email:\n       for se in row_email:\n          semail=se.email\n    else:\n       response.flash = \'Aluno n\xc3\xa3o possui email cadastrado!\'\n       realizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o possui email cadastrado!\')))\n       return dict(realizar_prova=realizar_prova)\n    #testa se o aluno est\xc3\xa1 alocado a uma turma   \n    row_alocacao = db(db.alocacao.aluno==idAluno).select(db.alocacao.turma)\n    if row_alocacao:\n            for alo in row_alocacao:\n                idTurma=alo.turma\n                row_turma = db(db.turma.id==idTurma).select(db.turma.nome)\n                if row_turma:\n                   for tu in row_turma:\n                     nome_turma=tu.nome\n    else:\n            response.flash = \'Aluno n\xc3\xa3o est\xc3\xa1 alocado a uma turma!\'\n            realizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o alocado a turma!\')))\n            return dict(realizar_prova=realizar_prova)\n    #testa se foi gerado uma prova para essa turma\n    row_prova = db(db.prova.turma==idTurma).select(db.prova.id,db.prova.referencia,db.prova.plano_de_prova)\n    if row_prova:\n            for pl in row_prova:\n                idProva=pl.id\n                prova=pl.referencia\n                idPlanoProva=pl.plano_de_prova\n    else:\n            response.flash = \'A turma n\xc3\xa3o possui uma prova relacionada!\'\n            realizar_prova = FORM(TABLE(TR(\'A turma n\xc3\xa3o possui uma prova relacionada!\')))\n            return dict(realizar_prova=realizar_prova)\n    #testa se foi gerado uma plano de prova\n    row_planoprova = db(db.plano_de_prova.id==idPlanoProva).select(db.plano_de_prova.id,db.plano_de_prova.referencia)\n    if row_planoprova:\n            for plp in row_planoprova:\n                PlanoProva=plp.referencia\n    else:\n            response.flash = \'A turma n\xc3\xa3o possui um plano de prova elaborado!\'\n            realizar_prova = FORM(TABLE(TR(\'A turma n\xc3\xa3o possui um plano de prova elaborado!\')))\n            return dict(realizar_prova=realizar_prova)        \n    realizar_prova = FORM(TABLE(\n        #certo \xc3\xa9 selecionar o aluno, sem combo\n        TR(\'Email:\',semail,\'Aluno:\', nome + \' \'+ lastname),\n        TR(\'Matricula:\',matricula,\'Turma:\',nome_turma),\n        TR(\'Prova:\',prova, \'Plano de Prova:\',PlanoProva),\n        #TR(\'Qual o Plano de Prova?\', SELECT([OPTION(pro.referencia,_value=pro.referencia) for pro in db().select(db.plano_de_prova.referencia,distinct=True)],_name=\'planoprova\',requires=IS_IN_DB(db,\'plano_de_prova.referencia\'))),\n        #TR(\'Qual a Turma?\', SELECT([OPTION(tur.nome,_value=tur.nome) for tur in db().select(db.turma.nome,distinct=True)],_name=\'turma\',requires=IS_IN_DB(db,\'turma.nome\'))),\n        TR(\'Realizar a Prova?\', SELECT([\'Sim\',\'N\xc3\xa3o\'],_name=\'opcao\',requires=IS_IN_SET([\'Sim\',\'N\xc3\xa3o\']))),\n        TR(INPUT(_type=\'hidden\', _name=\'PlanoProva\', _value=PlanoProva)),\n        TR(INPUT(_type=\'hidden\', _name=\'idProva\', _value=idProva)),\n        TR(INPUT(_type=\'hidden\', _name=\'idAluno\', _value=idAluno)),\n        TR(\'Responder as Perguntas -> \', INPUT(_type=\'submit\', _value=\'Continuar ou Iniciar a Prova\')),\n        ))\n    if realizar_prova.accepts(request.vars, session):\n        sopcao=realizar_prova.vars.opcao\n        if(sopcao==\'N\xc3\xa3o\'):\n              #Escreve no banco a desist\xc3\xaancia do aluno\n              response.flash = \'O Aluno Desistiu da prova!\'\n              realizar_prova = FORM(TABLE(TR(\'Vai receber uma nota zero!\')))\n              return dict(realizar_prova=realizar_prova)        \n        #recupera o Plano de Prova selecionado\n        PlanoProva =  realizar_prova.vars.PlanoProva\n        #buscar Taxionomia, Topico e Dificuldade do plano de prova\n        row_planoprova = db(db.plano_de_prova.referencia==PlanoProva).select(db.plano_de_prova.taxionomia,db.plano_de_prova.topico,db.plano_de_prova.dificuldade)\n        for plpr in row_planoprova:\n          idTax = plpr.taxionomia\n          idTop = plpr.topico \n          idDif = plpr.dificuldade  \n          #selecionar todas as quest\xc3\xa3o que tenham como caracteristicas a Taxionomia, Topico e Dificuldade\n          row_questao=db((db.questao.topico==idTop)&(db.questao.taxionomia==idTax)&(db.questao.dificuldade==idDif)).select(db.questao.id)\n          lista_Questao = [0] *  len(row_questao)\n          i=0\n          for que in row_questao:\n              lista_Questao[i] = int(que.id)\n              i = i + 1\n              \n        realizar_prova = FORM(TABLE(TR(row_planoprova,row_questao)))  #Temporariamente aqui para mostrar os resultados \n        \n        #lista_Questao=[2,3,55,57,9,11,13,15,28,33,44,90,18,10,100,133,22]  #aqui vamos pegar os daos do Banco de dados em um select \n        QuestoesSelecionadas = geraProva(lista_Questao)\n        \n        # criar uma prova para o aluno responder \'insert into provaGerada\' com base em QuestoesSelecionadas\n        #prg_dtr       data\n        #prg_alu_cod   aluno\n        #prg_pla_cod   planoprova\n        #prg_que_cod   questao\n        \n        response.flash = \'Os 10 Indices de Quest\xc3\xb5es Gerados - %s \'%QuestoesSelecionadas\n    elif realizar_prova.errors:\n        response.flash = \'Formul\xc3\xa1rio Inv\xc3\xa1lido\'\n    else:\n        response.flash = \'Por favor, Verifique se seus dados est\xc3\xa3o corretos, quando estiver pronto, selecionar se quer "Realizar a Prova" e clique em "Continuar ou Iniciar a Prova" para responder as perguntas ou Desistir!\'\n    return dict(realizar_prova=realizar_prova, vars = realizar_prova.vars)    \n  else:  \n    #realizar_prova = FORM(TABLE(TR(\'Usuario n\xc3\xa3o Logado\')))        \n    #response.flash = \'Usu\xc3\xa1rio n\xc3\xa3o Logado\'\n    redirect(URL(r=request, f=\'../default/user/login\'))\n  \n    \n    #A\xc3\xa7\xc3\xb5es corretas o aluno apenas clica em um bot\xc3\xa3o Realizar Prova\n    #Aluno - Uid *\n    #--Aloca\n    #----Turma\n    #-------Prova *\n    #---------PlanoProva\n    #-----------(dif,top,Tax)\n    #---------Questao *\n    #------------ProvaGerada  --> enviar para o form para resolu\xc3\xa7\xc3\xa3o da prova\n\nresponse._vars=response._caller(realizar_prova)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100223\\web2py\\gluon\\restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100223\\web2py\\applications\\Mestre/controllers/realizaprova.py", line 153, in <module>\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100223\\web2py\\gluon\\globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100223\\web2py\\applications\\Mestre/controllers/realizaprova.py", line 32, in realizar_prova\n    return dict(vars=nome.str.vars)\nAttributeError: \'str\' object has no attribute \'str\'\n'
p8
s.