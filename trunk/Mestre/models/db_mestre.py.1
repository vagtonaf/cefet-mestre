is_phone = IS_MATCH('^(\+\d{2}\-)?[\d\-]*(\#\d+)?$')

TASK_TYPES = ('Phone', 'Fax', 'Mail', 'Meet')
LISTA_TAXIONOMIA = ('Analizar','Compreender','Lembrar','Aplicar','Avaliar','Criar')

if auth.is_logged_in():
   me=auth.user.id
else:
   me=None

def advanced_editor(field, value):
    return TEXTAREA(_id = str(field).replace('.','_'), _name=field.name, _class='text ckeditor', value=value, _cols=80, _rows=10)
    
import datetime; now=datetime.datetime.now()

db.define_table('professor',
        Field('usuario',db.auth_user),
        Field('codigo_funcional',length=10,notnull=True)
        )
db.professor.usuario.requires=IS_IN_DB(db,'auth_user.id','auth_user.first_name')
db.professor.codigo_funcional.requires=IS_NOT_IN_DB(db, 'professor.codigo_funcional') 

db.define_table('aluno',
        Field('usuario',db.auth_user),
        Field('matricula',length=10,notnull=True)
        )
db.aluno.usuario.requires=IS_IN_DB(db,'auth_user.id','auth_user.first_name','auth_user.last_name')
db.aluno.matricula.requires=IS_NOT_IN_DB(db, 'aluno.matricula') 

db.define_table('instituicao',
        Field('nome',length=50,notnull=True)
        )
db.instituicao.nome.requires=IS_NOT_IN_DB(db, 'instituicao.nome') 
        
db.define_table('curso',
        Field('nome',length=50,notnull=True),
        Field('turma','string',requires=IS_IN_SET(["MANHÃ","TARDE","NOITE"])),
        Field('instituicao',db.instituicao)
        )
db.curso.instituicao.requires=IS_IN_DB(db,'instituicao.id','instituicao.nome')
db.curso.nome.requires=[IS_NOT_IN_DB(db, 'curso.nome'),IS_NOT_IN_DB(db, 'curso.turma')] 

db.define_table('disciplina',
        Field('nome',length=50,notnull=True),
        Field('curso',db.curso)
        )
db.disciplina.curso.requires=IS_IN_DB(db,'curso.id','curso.nome')

db.define_table('turma',
        Field('nome',length=50,notnull=True),
        Field('disciplina',db.disciplina)
        )
db.turma.disciplina.requires=IS_IN_DB(db,'disciplina.id','disciplina.nome')
db.turma.nome.requires=IS_NOT_IN_DB(db,'turma.nome')


db.define_table('alocacao',
        Field('aluno',db.aluno),
        Field('turma',db.turma),
        Field('data','datetime',default=request.now, writable=False)
        )
db.alocacao.aluno.requires=IS_IN_DB(db,'aluno.id','aluno.matricula','aluno.usuario.first_name')
db.alocacao.turma.requires=IS_IN_DB(db,'turma.id','turma.nome')

db.define_table('taxionomia',
        Field('nome','string',requires=IS_IN_SET(["Analizar","Compreender","Lembrar","Aplicar","Avaliar","Criar"]))
        )
db.taxionomia.nome.requires=[IS_NOT_IN_DB(db,'taxionomia.nome'),IS_IN_SET(LISTA_TAXIONOMIA)]    

db.define_table('dificuldade',
        Field('nivel','string',requires=IS_IN_SET(["Fácil","Médio","Difícil"]))
        )
db.dificuldade.nivel.requires=IS_NOT_IN_DB(db,'dificuldade.nivel')         

db.define_table('topico',
        Field('nome',length=50,notnull=True)
        )
db.topico.nome.requires=IS_NOT_IN_DB(db, 'topico.nome')     

db.define_table('questao',
        Field('enunciado','text',notnull=True),
        Field('taxionomia',db.taxionomia),
        Field('dificuldade',db.dificuldade),
        Field('topico',db.topico)
        )
db.questao.taxionomia.requires=IS_IN_DB(db,'taxionomia.id','taxionomia.nome')
db.questao.dificuldade.requires=IS_IN_DB(db,'dificuldade.id','dificuldade.nivel')
db.questao.topico.requires=IS_IN_DB(db,'topico.id','topico.nome')
db.questao.enunciado.requires=IS_NOT_IN_DB(db, 'questao.enunciado') 

db.define_table('alternativa',
        Field('questao',db.questao),
        Field('resposta','text',notnull=True),
        Field('correta','boolean') 
        )
db.alternativa.questao.requires=IS_IN_DB(db,'questao.id','questao.enunciado')
db.alternativa.resposta.requires=IS_NOT_IN_DB(db, 'alternativa.resposta')

db.define_table('plano_de_prova',
        Field('referencia',length=50,notnull=True)
        Field('professor',db.professor)
        )

db.define_table('item_plano_de_prova',
        Field('plano_de_prova',db.plano_de_prova)
        Field('valor','double',default=10.0,requires=IS_FLOAT_IN_RANGE(0,10.0)),
        Field('taxionomia',db.taxionomia),
        Field('dificuldade',db.dificuldade),
        Field('topico',db.topico), 
        )
       
db.item_plano_de_prova.plano_de_prova.requires=IS_IN_DB(db,'plano_de_prova.id','plano_de_prova.referencia')
db.item_plano_de_prova.taxionomia.requires=IS_IN_DB(db,'taxionomia.id','taxionomia.nome')
db.item_plano_de_prova.dificuldade.requires=IS_IN_DB(db,'dificuldade.id','dificuldade.nivel')
db.item_plano_de_prova.topico.requires=IS_IN_DB(db,'topico.id','topico.nome')
db.item_plano_de_prova.professor.requires=IS_IN_DB(db,'professor.id','professor.codigo_funcional')   
      

db.define_table('prova',
        Field('referencia',length=50,notnull=True),
        Field('turma',db.turma),
        Field('plano_de_prova',db.plano_de_prova),
        Field('tipo','string',requires=IS_IN_SET(["P1","SCHP1","P2","SCHP2","P3","SCHP3","PF","SCHPF","PR",]))
        )
db.prova.turma.requires=IS_IN_DB(db,'turma.id','turma.nome')
db.prova.plano_de_prova.requires=IS_IN_DB(db,'planoprova.referencia',distinct=True) 
db.prova.referencia.requires=IS_NOT_IN_DB(db, 'prova.referencia') 

db.define_table('prova_gerada',
        Field('data','datetime',default=request.now, writable=False),
        Field('aluno',db.aluno),
        Field('prova',db.prova),
        Field('questao',db.questao),
        Field('alternativa_correta',db.alternativa)
        )       
db.prova_gerada.aluno.requires=IS_IN_DB(db,'aluno.id','aluno.matricula')
db.prova_gerada.prova.requires=IS_IN_DB(db,'prova.id','prova.referencia')
db.prova_gerada.questao.requires=IS_IN_DB(db,'questao.id','questao.enunciado')
db.prova_gerada.alternativa_correta.requires=IS_IN_DB(db,'alternativa.id','alternativa.resposta',db(db.alternativa.id==db.prova_gerada.questao))
