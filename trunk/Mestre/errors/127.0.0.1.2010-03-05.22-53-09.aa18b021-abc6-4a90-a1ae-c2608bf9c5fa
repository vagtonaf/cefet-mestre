(dp1
S'output'
p2
S''
sS'layer'
p3
S'D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\applications\\Mestre/controllers/mcrud.py'
p4
sS'code'
p5
S"# coding: utf8\n# try something like\n\n\n@auth.requires_login()\n# Cadastra e Lista tabela simples\ndef cadlist():\n    try:\n        tabela=request.args(0) or redirect(URL(r=request,f='../default/error'))\n        form=crud.create(db[tabela])\n        if form.accepts(request.vars,session): \n            redirect(URL(r=request,f='../default/error'))\n        elif form.errors: response.flash='Erro em seu formul\xc3\xa1rio'\n        if tabela=='aluno':\n            row_professor=db(db.professor.usuario==auth.user.id).select(db.professor.ALL)\n            if row_professor:\n                registros=db(db.aluno.matricula>0).select(\n                    db.aluno.matricula,\n                    db.aluno.usuario,\n                    db.aluno.id,\n                    db.auth_user.ALL,\n                    left=db.auth_user.on(db.aluno.usuario==db.auth_user.id),\n                orderby=db.aluno.matricula\n                )\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n        elif tabela=='professor':\n            registros=db(db.professor.id>0).select(\n                db.professor.ALL,\n                db.auth_user.ALL,\n                left=db.auth_user.on(db.professor.usuario==db.auth_user.id)\n            )\n        elif tabela=='alocacao':\n            row_professor=db(db.professor.usuario==auth.user.id).select(db.professor.ALL)\n            if row_professor:  \n                list_alunosA=db()._select(db.alocacao.aluno)\n                list_alunos=db(~db.aluno.id.belongs(list_alunosA)).select(\n                    db.aluno.ALL,\n                    db.auth_user.ALL,\n                    left=db.auth_user.on(db.aluno.usuario==db.auth_user.id)\n                )\n                list_turmas=db(db.turma.id>0).select(\n                    db.turma.ALL,\n                    db.disciplina.ALL,\n                    left=db.disciplina.on(db.turma.disciplina==db.disciplina.id))\n                registros=db(db.aluno.id>0).select(\n                    db.alocacao.ALL,\n                    db.auth_user.ALL,\n                    left=db.auth_user.on(db.alocacao.aluno==db.auth_user.id),distinct=True\n                )\n            else:\n                redirect(URL(r=request,f='../default/erro_acesso'))\n            response.flash='Cadastra e Lista ' + tabela\n            return dict(registros=registros, form=form, tabela=tabela, list_turmas=list_turmas, list_alunos=list_alunos)\n        else:\n            registros=db(db[tabela].id>0).select(db[tabela].ALL)\n    except KeyError, NameError:\n        tabela='error'\n        response.flash='Tabela Inexistente!'\n        form=''\n        return dict(form=form, registros='N\xc3\xa3o posso listar esta tabela!', tabela=tabela)   \n    response.flash='Cadastra e Lista ' + tabela\n    return dict(registros=registros,form=form, tabela=tabela)\n\n@auth.requires_login()\n# Edita tabela simples\ndef edit():\n    row_professor=db(db.professor.usuario==auth.user.id).select(db.professor.ALL)\n    if row_professor:\n        tabela=request.args(0) or redirect(URL(r=request,f='../default/error'))\n        registro_id=request.args(1) or redirect(URL(r=request,f='../default/error'))\n        registros=db[tabela][registro_id] or redirect(URL(r=request,f='../default/error'))\n        form=crud.update(db[tabela],registros,next=url('Cadlist/'+ tabela))\n        return dict(form=form, tabela=tabela)\n    else:\n        redirect(URL(r=request,f='../default/erro_acesso'))\n\nresponse._vars=response._caller(cadlist)\n"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\applications\\Mestre/controllers/mcrud.py", line 78, in <module>\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\tools.py", line 1848, in f\n    return action(*a, **b)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\applications\\Mestre/controllers/mcrud.py", line 10, in cadlist\n    form=crud.create(db[tabela])\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\tools.py", line 2324, in create\n    deletable=False,\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\tools.py", line 2262, in update\n    upload=self.settings.download_url,\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\sqlhtml.py", line 602, in __init__\n    inp = self.widgets.options.widget(field, default)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\sqlhtml.py", line 186, in widget\n    options = requires[0].options()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\validators.py", line 377, in options\n    self.build_set()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\validators.py", line 361, in build_set\n    records = self.dbset.select(*self.fields, **dd)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\sql.py", line 3023, in select\n    rows = response(query)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\sql.py", line 3018, in response\n    db._execute(query)\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\MESTRE-20100227\\web2py\\gluon\\sql.py", line 926, in <lambda>\n    self._execute = lambda *a, **b: self._cursor.execute(*a, **b)\n  File "C:\\Python26\\lib\\site-packages\\MySQLdb\\cursors.py", line 166, in execute\n    self.errorhandler(self, exc, value)\n  File "C:\\Python26\\lib\\site-packages\\MySQLdb\\connections.py", line 35, in defaulterrorhandler\n    raise errorclass, errorvalue\nOperationalError: (1054, "Unknown column \'aluno.first_name\' in \'field list\'")\n'
p8
s.