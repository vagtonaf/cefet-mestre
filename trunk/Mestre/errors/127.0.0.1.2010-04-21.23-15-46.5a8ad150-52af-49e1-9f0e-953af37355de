(dp1
S'output'
p2
S''
sS'layer'
p3
S'D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/realizaprova.py'
p4
sS'code'
p5
S'# coding: utf8\n# try something like\nimport random\nimport datetime\n\ndef geraProva(lista, numQuestoes):\n #testa se o numero de questoes da lista \xc3\xa9 maior do que o numero de quest\xc3\xb5es para retorno\n if len(lista) >= numQuestoes: \n  s = [0] * numQuestoes\n  for i in range(numQuestoes):\n   while s[i]==0:\n    r = random.choice (lista)\n    t=0\n    if r in s:\n       t=1\n    if (t==0 and r<>0):\n       s[i]=r\n  s.sort()\n else:\n  s=0\n return s\n\ndef editprovagerada():\n\t#s\xc3\xb3 deixa editar se for aluno\n\trow_aluno=db(db.aluno.usuario==auth.user.id).select(db.aluno.ALL)\n\tif row_aluno:\n\t\ttabela=request.args(0) or redirect(URL(r=request,f=\'../default/error\'))\n\t\tregistro_id=request.args(1) or redirect(URL(r=request,f=\'../default/error\'))\n\t\tregistros=db[tabela][registro_id] or redirect(URL(r=request,f=\'../default/error\'))\n\t#if not registros: raise HTTP(404)\n\t\tcrud.settings.update_deletable = False\n\t\tform=crud.update(db[tabela],registros,next=url(\'realizar_prova\'))\n\t\treturn dict(form=form, tabela=tabela)\n\telse:\n\t\tredirect(URL(r=request,f=\'../default/erro_acesso\'))\n\n\ndef realizar_prova():\n\t#somente para teste e estudo\n\tif \'auth\' in globals():\n\t\tif auth.is_logged_in():\n\t\t\t#pega os dados do Aluno  \n\t\t\tnome=auth.user.first_name\n\t\t\tlastname=auth.user.last_name\n\t\t\tidUsuario=auth.user.id\n\t\t\t#testa se \xc3\xa9 um aluno\n\t\t\trow_aluno=db(db.aluno.usuario==idUsuario).select(db.aluno.ALL)\n\t\t\trow_prova=db().select(db.prova.ALL)\n\t\t\tif row_aluno:\n\t\t\t\tfor al in row_aluno:\n\t\t\t\t\tidAluno=al.id\n\t\t\t\t\tmatricula=al.matricula\n\t\t\telse:\n\t\t\t\tresponse.flash = \'O usu\xc3\xa1rio n\xc3\xa3o \xc3\xa9 um aluno cadastrado!\'\n\t\t\t\trealizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o cadastrado, procure seu professor!\')))\n\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n\t\t\t#testa se tem um email cadastrado para um poss\xc3\xadvel contato\n\t\t\trow_email=db(db.auth_user.id==idAluno).select(db.auth_user.email)\n\t\t\tif row_email:\n\t\t\t\tfor se in row_email:\n\t\t\t\t\tsemail=se.email\n\t\t\telse:\n\t\t\t\tresponse.flash = \'Aluno n\xc3\xa3o possui email cadastrado!\'\n\t\t\t\trealizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o possui email cadastrado!\')))\n\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n\t\t\t#testa se o aluno est\xc3\xa1 alocado a uma turma   \n\t\t\trow_alocacao = db(db.alocacao.aluno==idAluno).select(db.alocacao.turma)\n\t\t\tif row_alocacao:\n\t\t\t\tfor alo in row_alocacao:\n\t\t\t\t\tidTurma=alo.turma\n\t\t\t\t\trow_turma = db(db.turma.id==idTurma).select(db.turma.nome)\n\t\t\t\t\tfor tu in row_turma:\n\t\t\t\t\t\tnome_turma=tu.nome\n\t\t\telse:\n\t\t\t\tresponse.flash = \'Aluno n\xc3\xa3o est\xc3\xa1 alocado a uma turma!\'\n\t\t\t\trealizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o alocado a turma!\')))\n\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n\t\t\t#testa se foi gerado uma prova para essa turma\n\t\t\trow_prova = db(db.prova.turma==idTurma and db.prova.data_aplicacao>0).select(\n\t\t\t\t\t\tdb.prova.id,db.prova.referencia,db.prova.plano_de_prova)\n\t\t\tif row_prova:\n\t\t\t\tfor pl in row_prova:\n\t\t\t\t\tidProva=pl.id\n\t\t\t\t\tprova=pl.referencia\n\t\t\t\t\tidPlanoProva=pl.plano_de_prova\n\t\t\telse:\n\t\t\t\tresponse.flash = \'Sua turma n\xc3\xa3o possui uma prova relacionada ou aplicada pelo professor!\'\n\t\t\t\trealizar_prova = FORM(TABLE(TR(\'Sua turma n\xc3\xa3o possui uma prova relacionada ou aplicada pelo professor!\')))\n\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova)\n\t\t\t#testa se foi gerado uma plano de prova\n\t\t\trow_planoprova = db(db.plano_de_prova.id==idPlanoProva).select(db.plano_de_prova.id,db.plano_de_prova.referencia)\n\t\t\tif row_planoprova:\n\t\t\t\tfor plp in row_planoprova:\n\t\t\t\t\tPlanoProva=plp.referencia\n\t\t\telse:\n\t\t\t\tresponse.flash = \'A turma n\xc3\xa3o possui um plano de prova elaborado!\'\n\t\t\t\trealizar_prova = FORM(TABLE(TR(\'A turma n\xc3\xa3o possui um plano de prova elaborado!\')))\n\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n\t\t\t#Permite ao aluno iniciar a prova ou n\xc3\xa3o \n\t\t\tif request.args(0):\n\t\t\t\tcontinua=request.args(0)\n\t\t\tif  continua<>\'continua\':\n\t\t\t\trealizar_prova = FORM(TABLE(\n\t\t\t\tTR(\'Email:\',semail,\'Aluno:\', nome + \' \'+ lastname),\n\t\t\t\tTR(\'Matricula:\',matricula,\'Turma:\',nome_turma),\n\t\t\t\tTR(\'Prova:\',prova, \'Plano de Prova:\',PlanoProva),\n\t\t\t\t#TR(\'Qual o Plano de Prova?\', SELECT([OPTION(pro.referencia,_value=pro.referencia) for pro in db().select(db.plano_de_prova.referencia,distinct=True)],_name=\'planoprova\',requires=IS_IN_DB(db,\'plano_de_prova.referencia\'))),\n\t\t\t\t#TR(\'Qual a Turma?\', SELECT([OPTION(tur.nome,_value=tur.nome) for tur in db().select(db.turma.nome,distinct=True)],_name=\'turma\',requires=IS_IN_DB(db,\'turma.nome\'))),\n\t\t\t\tTR(\'Realizar a Prova?\', SELECT([\'Sim\',\'N\xc3\xa3o\'],_name=\'opcao\',requires=IS_IN_SET([\'Sim\',\'N\xc3\xa3o\']))),\n\t\t\t\tTR(INPUT(_type=\'hidden\', _name=\'PlanoProva\', _value=PlanoProva)),\n\t\t\t\tTR(INPUT(_type=\'hidden\', _name=\'idProva\', _value=idProva)),\n\t\t\t\tTR(INPUT(_type=\'hidden\', _name=\'idAluno\', _value=idAluno)),\n\t\t\t\tTR(\'Responder as Perguntas -> \', INPUT(_type=\'submit\', _value=\'Continuar ou Iniciar a Prova\')),\n\t\t\t\t))\n\t\t\tif (realizar_prova.accepts(request.vars, session) or continua==\'continua\'):\n\t\t\t\t#pega identifica\xc3\xa7\xc3\xa3o do aluno\n\t\t\t\tidAluno=realizar_prova.vars.idAluno\n\t\t\t\t#pega identifica\xc3\xa7\xc3\xa3o da prova\n\t\t\t\tidProva=realizar_prova.vars.idProva\n\t\t\t\trow_aluno=db(db.aluno.id==idAluno).select(db.aluno.ALL)\n\t\t\t\trow_prova=db(db.prova.id==idProva).select(db.prova.ALL)\n\t\t\t\t#pega do sistema a data da prova para o armazenamento no prova gerada para caracterizar uma prova concluida\n\t\t\t\tdataprova = datetime.datetime.now()\n\t\t\t\t#verifica se o aluno quer fazer a prova\n\t\t\t\tsopcao=realizar_prova.vars.opcao\n\t\t\t\tif(sopcao==\'N\xc3\xa3o\'):\n\t\t\t\t\t#Escreve no banco a desist\xc3\xaancia do aluno\n\t\t\t\t\tresponse.flash = \'O Aluno Desistiu da prova!\'\n\t\t\t\t\trealizar_prova = FORM(TABLE(TR(\'Vai receber uma nota zero!\')))\n\t\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n\t\t\t\t#recupera o Plano de Prova selecionado\n\t\t\t\tPlanoProva =  realizar_prova.vars.PlanoProva\n\t\t\t\t#buscar Taxionomia, Topico e Dificuldade do plano de prova\n\t\t\t\trow_planoprova = db(db.plano_de_prova.referencia==PlanoProva).select(\n\t\t\t\t\tdb.plano_de_prova.ALL, \n\t\t\t\t\tdb.item_plano_de_prova.ALL,\n\t\t\t\t\tleft=db.item_plano_de_prova.on(db.plano_de_prova.id==db.item_plano_de_prova.plano_de_prova))\n\t\t\t\t#Seleciona pelo Plano de Prova a taxionomia, topico e dificuldade para listar no banco de quest\xc3\xb5es\n\t\t\t\tfor plpr in row_planoprova:\n\t\t\t\t\tnValor = plpr.item_plano_de_prova.valor\n\t\t\t\t\tidTax = plpr.item_plano_de_prova.taxionomia\n\t\t\t\t\tidTop = plpr.item_plano_de_prova.topico \n\t\t\t\t\tidDif = plpr.item_plano_de_prova.dificuldade  \n\t\t\t\t\tprint \'Valor:\' + str(nValor)\n\t\t\t\t\t#selecionar todas as quest\xc3\xa3o que tenham como caracteristicas a Taxionomia, Topico e Dificuldade\n\t\t\t\t\trow_questao=db((db.questao.topico==idTop)&(db.questao.taxionomia==idTax)&(db.questao.dificuldade==idDif)).select(db.questao.id)\n\t\t\t\t\t#cria uma lista de quest\xc3\xb5es\n\t\t\t\t\tlista_Questao = [0] *  len(row_questao)\n\t\t\t\t\ti=0\n\t\t\t\t\tfor que in row_questao:\n\t\t\t\t\t\tlista_Questao[i] = int(que.id)\n\t\t\t\t\t\tprint \'lista:\' + str(lista_Questao[i])\n\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t# Escolhe randomicamente da lista de questoes a questao que vai atender ao plano de prova selecionado\n\t\t\t\t\t#seleciona uma quest\xc3\xa3o da lista selecionada\n\t\t\t\t\tQuestaoSelecionada = geraProva(lista_Questao,1)\n\t\t\t\t\t#Verifica se conseguiu achar uma quest\xc3\xa3o que atenda a exigencia, 0 = n\xc3\xa3o consegui\n\t\t\t\t\tprint \'Questoes Selecionadas:\' + str(QuestaoSelecionada)\n\t\t\t\t\tif QuestaoSelecionada==0:\n\t\t\t\t\t\tresponse.flash = \'N\xc3\xa3o existe quest\xc3\xa3o para (topico, dificuldade e taxionomia) para o plano de prova \' + PlanoProva + \' Valor: \' + str(nValor)\n\t\t\t\t\t\trealizar_prova = FORM(TABLE(TR(\'Favor informar ao professor para verificar o cadastro de quest\xc3\xb5es!\')))\n\t\t\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n\t\t\t\t\tif QuestaoSelecionada>0:\n\t\t\t\t\t\t#verifica se a prova gerada existe e se n\xc3\xa3o foi finalizada pelo aluno\n\t\t\t\t\t\trow_prova_gerada = db(db.prova_gerada.aluno==idAluno\n\t\t\t\t\t\t\tand db.prova_gerada.prova==idProva).select(\n\t\t\t\t\t\t\tdb.prova_gerada.ALL\n\t\t\t\t\t\t)\n\t\t\t\t\t\tfor provger in row_prova_gerada:\n\t\t\t\t\t\t\tif provger.data!=None:\n\t\t\t\t\t\t\t\tresponse.flash = \'Prova finalizada\'\n\t\t\t\t\t\t\t\trealizar_prova = FORM(TABLE(TR(\'Prova Finalizada pelo aluno\')))\n\t\t\t\t\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n\t\t\t\t\t\t#se houver uma quest\xc3\xa3o selecionada pesquisar se a prova gerada para o aluno nesta data\n\t\t\t\t\t\trow_prova_gerada = db(db.prova_gerada.aluno==idAluno and db.prova_gerada.prova==idProva).select(db.prova_gerada.ALL)\n\t\t\t\t\t\t#se haver prova gerada pega o id, se n\xc3\xa3o inclui uma prova_gerada\n\t\t\t\t\t\tif row_prova_gerada:\n\t\t\t\t\t\t\tgerada = row_prova_gerada[0].gerada\n\t\t\t\t\t\t\tidProvaGerada = row_prova_gerada[0].id\n\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t#busca objeto aluno\n\t\t\t\t\t\t\trAluno = db(db.aluno.id==idAluno).select(db.aluno.id)\n\t\t\t\t\t\t\t#busca objeto Prova                    \n\t\t\t\t\t\t\trProva = db(db.prova.id==idProva).select(db.prova.id)\n\t\t\t\t\t\t\tfor rr in rAluno:\n\t\t\t\t\t\t\t\tfor rrr in rProva: \n\t\t\t\t\t\t\t\t\tidProvaGerada = db.prova_gerada.insert(aluno=rr.id, prova=rrr.id)\n\t\t\t\t\t\tif gerada:\n\t\t\t\t\t\t\tresponse.flash = \'Prova ja foi gerada, o aluno s\xc3\xb3 pode realizar a prova no moneto da gera\xc3\xa7\xc3\xa3o\'\n\t\t\t\t\t\t\trealizar_prova = FORM(TABLE(TR(\'Prova Gerada, se houve algum problema pe\xc3\xa7a para o professor para gerar nova prova\')))\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t#se haver item de prova gerada pega o id, se n\xc3\xa3o gera um\n\t\t\t\t\t\t\trow_item_prova_gerada = db(db.item_prova_gerada.prova_gerada==idProvaGerada\n\t\t\t\t\t\t\t\tand db.item_prova_gerada.questao==QuestaoSelecionada[0]).select(\n\t\t\t\t\t\t\t\tdb.item_prova_gerada.ALL\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t#busca objeto questao\n\t\t\t\t\t\t\trQuestao = db(db.questao.id==QuestaoSelecionada[0]).select(db.questao.id)\n\t\t\t\t\t\t\t#busca objeto Prova Gerada\n\t\t\t\t\t\t\trProvaGerada = db(db.prova_gerada.id==idProvaGerada).select(db.prova_gerada.id)\n\t\t\t\t\t\t\tfor rr2 in rProvaGerada:\n\t\t\t\t\t\t\t\tfor rrr2 in rQuestao: \n\t\t\t\t\t\t\t\t\tidItemProvaGerada = db.item_prova_gerada.insert(\n\t\t\t\t\t\t\t\t\t\tprova_gerada=rr2.id, questao=rrr2.id\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t#bloqueia a prova j\xc3\xa1 gerada\n\t\t\t\tdb(db.prova_gerada.id==idProvaGerada).update(gerada=True)\n\t\t\t\t#response.flash = \'As Quest\xc3\xb5es foram Geradas aleatoriamente para voc\xc3\xaa responder - %s \'%QuestaoSelecionada\n\t\t\t\t#Mostra as quest\xc3\xb5es criadas para o aluno\n\t\t\t\taluno = db(db.aluno.id==idAluno).select(db.aluno.ALL)\n\t\t\t\tprova = db(db.prova.id==idProva).select(db.prova.ALL)\n\t\t\t\trow_prova = db(db.item_prova_gerada.prova_gerada==idProvaGerada).select(db.item_prova_gerada.ALL)\n\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=aluno, rprova=prova, tabela=\'prova\')\n\t\t\telif realizar_prova.errors:\n\t\t\t\tresponse.flash = \'Formul\xc3\xa1rio Inv\xc3\xa1lido\'\n\t\t\telse:\n\t\t\t\tresponse.flash = \'Por favor, Verifique se seus dados est\xc3\xa3o corretos, quando estiver pronto, selecionar se quer "Realizar a Prova" e clique em "Continuar ou Iniciar a Prova" para responder as perguntas ou Desistir!\'\n\t\t\t\treturn dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, vars = realizar_prova.vars, tabela=\'solicitacao\')    \n\t\telse:\n\t\t\t#realizar_prova = FORM(TABLE(TR(\'Usuario n\xc3\xa3o Logado\')))        \n\t\t\t#response.flash = \'Usu\xc3\xa1rio n\xc3\xa3o Logado\'\n\t\t\tredirect(URL(r=request, f=\'../default/user/login\'))\n\telse:\n\t\t#realizar_prova = FORM(TABLE(TR(\'Usuario n\xc3\xa3o Autenticado\')))        \n\t\t#response.flash = \'Usu\xc3\xa1rio n\xc3\xa3o Autenticado\'\n\t\tredirect(URL(r=request, f=\'../default/user/login\'))\n\nresponse._vars=response._caller(realizar_prova)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\restricted.py", line 178, in restricted\n    exec ccode in environment\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/realizaprova.py", line 228, in <module>\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/realizaprova.py", line 115, in realizar_prova\n    if (realizar_prova.accepts(request.vars, session) or continua==\'continua\'):\nUnboundLocalError: local variable \'realizar_prova\' referenced before assignment\n'
p8
s.