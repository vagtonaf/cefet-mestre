(dp1
S'output'
p2
S''
sS'layer'
p3
S'D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/realizaprova.py'
p4
sS'code'
p5
S'# coding: utf8\n# try something like\nimport random\nimport datetime\nimport time\n\ndef geraProva(lista, numQuestoes):\n #testa se o numero de questoes da lista \xc3\xa9 maior do que o numero de quest\xc3\xb5es para retorno\n if len(lista) >= numQuestoes: \n  s = [0] * numQuestoes\n  for i in range(numQuestoes):\n   while s[i]==0:\n    r = random.choice (lista)\n    t=0\n    if r in s:\n       t=1\n    if (t==0 and r<>0):\n       s[i]=r\n  s.sort()\n else:\n  s=0\n return s\n\ndef editprovagerada():\n    #s\xc3\xb3 deixa editar se for aluno\n    if auth.user.id<>None:\n        row_aluno=db(db.aluno.usuario==auth.user.id).select(db.aluno.ALL)\n        if row_aluno:\n            tabela=request.args(0) or redirect(URL(r=request,f=\'../default/error\'))\n            registro_id=request.args(2) or redirect(URL(r=request,f=\'../default/error\'))\n            registro_id2=request.args(1) or redirect(URL(r=request,f=\'../default/error\'))\n            registros=db[tabela][registro_id] or redirect(URL(r=request,f=\'../default/error\'))\n         #if not registros: raise HTTP(404)\n            crud.settings.update_deletable = False\n            crud.messages.submit_button = \'Responder\' \n            #tabela_delecionada = db[tabela]\n            #tabela_delecionada.prova_gerada.writable=False\n            #tabela_delecionada.questao.writable=False\n            item_prova_gerada=db(db.item_prova_gerada.id==registro_id).select(db.item_prova_gerada.ALL)\n            questao=db(db.questao.id==registro_id2).select(db.questao.ALL)\n            respostas=db(db.alternativa.questao==registro_id2).select(db.alternativa.ALL)\n            form=crud.update(db[tabela],registros,next=url(\'realizar_prova\'))\n            return dict(form=form, tabela=tabela, item_prova_gerada=item_prova_gerada, questao=questao, respostas=respostas)\n        else:\n            redirect(URL(r=request,f=\'../default/erro_acesso\'))\n    else:\n        redirect(URL(r=request,f=\'../default/erro_acesso\'))\n\ndef realizar_prova():\n    #somente para teste e estudo\n    if \'auth\' in globals():\n        if auth.is_logged_in():\n                #pega os dados do Aluno  \n                nome=auth.user.first_name\n                lastname=auth.user.last_name\n                idUsuario=auth.user.id\n                #testa se \xc3\xa9 um aluno\n                row_aluno=db(db.aluno.usuario==idUsuario).select(db.aluno.ALL)\n                row_prova=db().select(db.prova.ALL)\n                if row_aluno:\n                    for al in row_aluno:\n                        idAluno=al.id\n                        matricula=al.matricula\n                else:\n                    response.flash = \'O usu\xc3\xa1rio n\xc3\xa3o \xc3\xa9 um aluno cadastrado!\'\n                    realizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o cadastrado, procure seu professor!\')))\n                    return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n                #testa se tem um email cadastrado para um poss\xc3\xadvel contato\n                row_email=db(db.auth_user.id==idAluno).select(db.auth_user.email)\n                if row_email:\n                    for se in row_email:\n                        semail=se.email\n                else:\n                    response.flash = \'Aluno n\xc3\xa3o possui email cadastrado!\'\n                    realizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o possui email cadastrado!\')))\n                    return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n                #testa se o aluno est\xc3\xa1 alocado a uma turma   \n                row_alocacao = db(db.alocacao.aluno==idAluno).select(db.alocacao.turma)\n                if row_alocacao:\n                    for alo in row_alocacao:\n                        idTurma=alo.turma\n                        row_turma = db(db.turma.id==idTurma).select(db.turma.nome)\n                        for tu in row_turma:\n                            nome_turma=tu.nome\n                else:\n                    response.flash = \'Aluno n\xc3\xa3o est\xc3\xa1 alocado a uma turma!\'\n                    realizar_prova = FORM(TABLE(TR(\'Aluno n\xc3\xa3o alocado a turma!\')))\n                    return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n                #testa se foi gerado uma prova para essa turma\n                row_prova = db(db.prova.turma==idTurma and db.prova.data_aplicacao>0).select(\n                        db.prova.id,db.prova.referencia,db.prova.plano_de_prova)\n                if row_prova:\n                    for pl in row_prova:\n                        idProva=pl.id\n                        prova=pl.referencia\n                        idPlanoProva=pl.plano_de_prova\n                else:\n                    response.flash = \'Sua turma n\xc3\xa3o possui uma prova relacionada ou aplicada pelo professor!\'\n                    realizar_prova = FORM(TABLE(TR(\'Sua turma n\xc3\xa3o possui uma prova relacionada ou aplicada pelo professor!\')))\n                    return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n                #testa se foi gerado uma plano de prova\n                row_planoprova = db(db.plano_de_prova.id==idPlanoProva).select(db.plano_de_prova.id,db.plano_de_prova.referencia)\n                if row_planoprova:\n                    for plp in row_planoprova:\n                        PlanoProva=plp.referencia\n                else:\n                    response.flash = \'A turma n\xc3\xa3o possui um plano de prova elaborado!\'\n                    realizar_prova = FORM(TABLE(TR(\'A turma n\xc3\xa3o possui um plano de prova elaborado!\')))\n                    return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n                #Permite ao aluno iniciar a prova ou n\xc3\xa3o \n                realizar_prova = FORM(TABLE(\n                      TR(\'Email:\',semail,\'Aluno:\', nome + \' \'+ lastname),\n                      TR(\'Matricula:\',matricula,\'Turma:\',nome_turma),\n                      TR(\'Prova:\',prova, \'Plano de Prova:\',PlanoProva),\n                      #TR(\'Qual o Plano de Prova?\', SELECT([OPTION(pro.referencia,_value=pro.referencia) for pro in db().select(db.plano_de_prova.referencia,distinct=True)],_name=\'planoprova\',requires=IS_IN_DB(db,\'plano_de_prova.referencia\'))),\n                      #TR(\'Qual a Turma?\', SELECT([OPTION(tur.nome,_value=tur.nome) for tur in db().select(db.turma.nome,distinct=True)],_name=\'turma\',requires=IS_IN_DB(db,\'turma.nome\'))),\n                      TR(\'Realizar a Prova?\', SELECT([\'Sim\',\'N\xc3\xa3o\'],_name=\'opcao\',requires=IS_IN_SET([\'Sim\',\'N\xc3\xa3o\']))),\n                      TR(INPUT(_type=\'hidden\', _name=\'PlanoProva\', _value=PlanoProva)),\n                      TR(INPUT(_type=\'hidden\', _name=\'idProva\', _value=idProva)),\n                      TR(INPUT(_type=\'hidden\', _name=\'idAluno\', _value=idAluno)),\n                      TR(\'Responder as Perguntas -> \', INPUT(_type=\'submit\', _value=\'Continuar ou Iniciar a Prova\')),\n                      ))\n                if realizar_prova.accepts(request.vars, session):\n                    #pega identifica\xc3\xa7\xc3\xa3o do aluno\n                    idAluno=realizar_prova.vars.idAluno\n                    #pega identifica\xc3\xa7\xc3\xa3o da prova\n                    idProva=realizar_prova.vars.idProva\n                    row_aluno=db(db.aluno.id==idAluno).select(db.aluno.ALL)\n                    row_prova=db(db.prova.id==idProva).select(db.prova.ALL)\n                    #pega do sistema a data da prova para o armazenamento no prova gerada para caracterizar uma prova concluida\n                    dataprova = datetime.datetime.now()\n                    #verifica se o aluno quer fazer a prova\n                    sopcao=realizar_prova.vars.opcao\n                    if(sopcao==\'N\xc3\xa3o\'):\n                        #Escreve no banco a desist\xc3\xaancia do aluno\n                        response.flash = \'O Aluno Desistiu da prova!\'\n                        realizar_prova = FORM(TABLE(TR(\'Vai receber uma nota zero!\')))\n                        return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n                    #recupera o Plano de Prova selecionado\n                    PlanoProva =  realizar_prova.vars.PlanoProva\n                    #buscar Taxionomia, Topico e Dificuldade do plano de prova\n                    row_planoprova = db(db.plano_de_prova.referencia==PlanoProva).select(\n                        db.plano_de_prova.ALL, \n                        db.item_plano_de_prova.ALL,\n                        left=db.item_plano_de_prova.on(db.plano_de_prova.id==db.item_plano_de_prova.plano_de_prova))\n                    #Seleciona pelo Plano de Prova a taxionomia, topico e dificuldade para listar no banco de quest\xc3\xb5es\n                    for plpr in row_planoprova:\n                        nValor = plpr.item_plano_de_prova.valor\n                        idTax = plpr.item_plano_de_prova.taxionomia\n                        idTop = plpr.item_plano_de_prova.topico \n                        idDif = plpr.item_plano_de_prova.dificuldade  \n                        print \'Valor:\' + str(nValor)\n                        #selecionar todas as quest\xc3\xa3o que tenham como caracteristicas a Taxionomia, Topico e Dificuldade\n                        row_questao=db((db.questao.topico==idTop)&(db.questao.taxionomia==idTax)&(db.questao.dificuldade==idDif)).select(db.questao.id)\n                        #cria uma lista de quest\xc3\xb5es\n                        lista_Questao = [0] *  len(row_questao)\n                        i=0\n                        for que in row_questao:\n                            lista_Questao[i] = int(que.id)\n                            print \'lista:\' + str(lista_Questao[i])\n                            i = i + 1\n                        # Escolhe randomicamente da lista de questoes a questao que vai atender ao plano de prova selecionado\n                        #seleciona uma quest\xc3\xa3o da lista selecionada\n                        QuestaoSelecionada = geraProva(lista_Questao,1)\n                        #Verifica se conseguiu achar uma quest\xc3\xa3o que atenda a exigencia, 0 = n\xc3\xa3o consegui\n                        print \'Questoes Selecionadas:\' + str(QuestaoSelecionada)\n                        if QuestaoSelecionada==0:\n                            response.flash = \'N\xc3\xa3o existe quest\xc3\xa3o para (topico, dificuldade e taxionomia) para o plano de prova \' + PlanoProva + \' Valor: \' + str(nValor)\n                            realizar_prova = FORM(TABLE(TR(\'Favor informar ao professor para verificar o cadastro de quest\xc3\xb5es!\')))\n                            return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n                        if QuestaoSelecionada>0:\n                            #verifica se a prova gerada existe e se n\xc3\xa3o foi finalizada pelo aluno\n                            row_prova_gerada = db(db.prova_gerada.aluno==idAluno\n                                and db.prova_gerada.prova==idProva).select(\n                                db.prova_gerada.ALL\n                            )\n                            for provger in row_prova_gerada:\n                                if provger.data!=None:\n                                    response.flash = \'Prova finalizada\'\n                                    realizar_prova = FORM(TABLE(TR(\'Prova Finalizada pelo aluno\')))\n                                    return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, tabela=\'solicitacao\')\n                            #se houver uma quest\xc3\xa3o selecionada pesquisar se a prova gerada para o aluno nesta data\n                            row_prova_gerada = db(db.prova_gerada.aluno==idAluno and db.prova_gerada.prova==idProva).select(db.prova_gerada.ALL)\n                            #se haver prova gerada pega o id, se n\xc3\xa3o inclui uma prova_gerada\n                            if row_prova_gerada:\n                                gerada = row_prova_gerada[0].gerada\n                                idProvaGerada = row_prova_gerada[0].id\n                            else: \n                                #busca objeto aluno\n                                rAluno = db(db.aluno.id==idAluno).select(db.aluno.id)\n                                #busca objeto Prova                    \n                                rProva = db(db.prova.id==idProva).select(db.prova.id)\n                                for rr in rAluno:\n                                    for rrr in rProva: \n                                        idProvaGerada = db.prova_gerada.insert(aluno=rr.id, prova=rrr.id)\n                            if gerada:\n                                response.flash = \'Prova ja foi gerada, o aluno s\xc3\xb3 pode realizar a prova no moneto da gera\xc3\xa7\xc3\xa3o\'\n                                realizar_prova = FORM(TABLE(TR(\'Prova Gerada, se houve algum problema pe\xc3\xa7a para o professor para gerar nova prova\')))\n                            else:\n                                #se haver item de prova gerada pega o id, se n\xc3\xa3o gera um\n                                row_item_prova_gerada = db(db.item_prova_gerada.prova_gerada==idProvaGerada\n                                    and db.item_prova_gerada.questao==QuestaoSelecionada[0]).select(\n                                    db.item_prova_gerada.ALL\n                                )\n                                #busca objeto questao\n                                rQuestao = db(db.questao.id==QuestaoSelecionada[0]).select(db.questao.id)\n                                #busca objeto Prova Gerada\n                                rProvaGerada = db(db.prova_gerada.id==idProvaGerada).select(db.prova_gerada.id)\n                                for rr2 in rProvaGerada:\n                                    for rrr2 in rQuestao: \n                                        idItemProvaGerada = db.item_prova_gerada.insert(\n                                            prova_gerada=rr2.id, questao=rrr2.id\n                                        )\n                    #bloqueia a prova j\xc3\xa1 gerada\n                    db(db.prova_gerada.id==idProvaGerada).update(gerada=True)\n                    #response.flash = \'As Quest\xc3\xb5es foram Geradas aleatoriamente para voc\xc3\xaa responder - %s \'%QuestaoSelecionada\n                    #Mostra as quest\xc3\xb5es criadas para o aluno\n                    aluno = db(db.aluno.id==idAluno).select(db.aluno.ALL)\n                    prova = db(db.prova.id==idProva).select(db.prova.ALL)\n                    row_prova = db(db.item_prova_gerada.prova_gerada==idProvaGerada).select(db.item_prova_gerada.ALL)\n                    return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=aluno, rprova=prova, tabela=\'prova\')\n                elif realizar_prova.errors:\n                    response.flash = \'Formul\xc3\xa1rio Inv\xc3\xa1lido\'\n                else:\n                    response.flash = \'Por favor, Verifique se seus dados est\xc3\xa3o corretos, quando estiver pronto, selecionar se quer "Realizar a Prova" e clique em "Continuar ou Iniciar a Prova" para responder as perguntas ou Desistir!\'\n                    return dict(realizar_prova=realizar_prova, row_prova=row_prova, raluno=row_aluno, rprova=row_prova, vars = realizar_prova.vars, tabela=\'solicitacao\')    \n        else:\n            #realizar_prova = FORM(TABLE(TR(\'Usuario n\xc3\xa3o Logado\')))        \n            #response.flash = \'Usu\xc3\xa1rio n\xc3\xa3o Logado\'\n            redirect(URL(r=request, f=\'../default/user/login\'))\n    else:\n        #realizar_prova = FORM(TABLE(TR(\'Usuario n\xc3\xa3o Autenticado\')))        \n        #response.flash = \'Usu\xc3\xa1rio n\xc3\xa3o Autenticado\'\n        redirect(URL(r=request, f=\'../default/user/login\'))\n\ndef concluir():\n    #s\xc3\xb3 deixa editar se for aluno\n    row_aluno=db(db.aluno.usuario==auth.user.id).select(db.aluno.ALL)\n    if row_aluno:\n        idProvaGerada=request.args(0) or redirect(URL(r=request,f=\'../default/error\'))\n        hoje = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")\n        db(db.prova_gerada.id==idProvaGerada).update(data=datetime.datetime.now())\n        return dict(realizar_prova=hoje, tabela=\'Prova concluida\')\n    else:\n        redirect(URL(r=request,f=\'../default/erro_acesso\'))\n\nresponse._vars=response._caller(editprovagerada)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\restricted.py", line 178, in restricted\n    exec ccode in environment\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/realizaprova.py", line 247, in <module>\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\gluon\\globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\cefet\\2009.2, 2010.1\\LocalHostWeb2Py\\CEFET-MESTRE\\web2py\\applications\\Mestre/controllers/realizaprova.py", line 26, in editprovagerada\n    if auth.user.id<>None:\nAttributeError: \'NoneType\' object has no attribute \'id\'\n'
p8
s.