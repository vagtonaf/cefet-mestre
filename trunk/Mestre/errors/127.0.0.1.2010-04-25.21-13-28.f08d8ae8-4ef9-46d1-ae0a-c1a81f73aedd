(dp1
S'output'
p2
S''
sS'layer'
p3
S'C:\\cefet\\2009.2,2010.1\\LocalHostWeb2Py\\cefet-mestre\\web2py\\applications\\Mestre/controllers/relatorios.py'
p4
sS'code'
p5
S"# coding: utf8\n# try something like\nimport random\n\n\ndef index():\n    c_turmas=db().select(db.turma.ALL)\n    return { 'v_turmas' : c_turmas}\n\ndef rel_aluno_nota():\n    aluno_nota=[]\n    from applications.Mestre.modules.graf1 import gera_grafico   \n    turma_id = request.args[0]\n    query=(db.aluno.id == db.alocacao.aluno)&(db.turma.id==db.alocacao.turma)&(db.turma.id==turma_id)\n    alocacao = db(query).select(db.aluno.matricula)\n    print db(query)._select(db.aluno.matricula)\n    for aluno in alocacao:\n        novo_aluno = {'nome':aluno.matricula,'nota':random.random()*10}\n        aluno_nota.append(novo_aluno)\n        print novo_aluno \n    gera_grafico(aluno_nota,'Turma 01 - Notas','Alunos','Notas','applications/Mestre/static/turma01.png')\n    return dict(imagem = 'turma01.png')\n    \ndef graf_bar():\n    return dict()\n\ndef resultado_prova():\n\tidAluno=request.args(0)\n\tusuario = db(db.aluno.id==idAluno).select(db.aluno.usuario)\n\tif usuario:\n\t\tfor u in usuario:\n\t\t\tAluno=u.usuario.first_name + ' ' + u.usuario.last_name\n\telse:\n\t\treturn dict(msg='Nao e aluno'))\n\ttotal=0\n\tprovarealizada = db(db.prova_gerada.aluno==idAluno).select(db.prova_gerada.ALL, db.item_prova_gerada.ALL,\n\t\tleft=db.item_prova_gerada.on(db.item_prova_gerada.prova_gerada==db.prova_gerada.id))\n\tfor ipr in provarealizada:\n\t\tProva=ipr.item_prova_gerada.prova_gerada.prova.referencia\n\t\tData1 = ipr.item_prova_gerada.prova_gerada.prova.data_aplicacao\n\t\tData2 = ipr.item_prova_gerada.prova_gerada.data\n\t\tPlanodeProva=ipr.item_prova_gerada.prova_gerada.prova.plano_de_prova.referencia\n\t\talternativa=db(db.alternativa.questao==ipr.item_prova_gerada.questao and db.alternativa.id==ipr.item_prova_gerada.alternativa_escolhida).select(db.questao.ALL, db.alternativa.ALL, \n\t\t\tleft=db.alternativa.on(db.alternativa.questao==db.questao.id))\n\tfor ssa in alternativa:\n\t\titemplanoprova=db(db.item_plano_de_prova.plano_de_prova==ipr.prova_gerada.prova.plano_de_prova).select(db.item_plano_de_prova.ALL)\n\t\tfor resp in itemplanoprova:\n\t\t\tif resp.topico==ssa.questao.topico:\n\t\t\t\tif resp.dificuldade==ssa.questao.dificuldade:\n\t\t\t\t\tif resp.taxionomia==ssa.questao.taxionomia:\n\t\t\t\t\t\tif ssa.alternativa.correta==True:\n\t\t\t\t\t\t\ttotal = total + resp.valor\n\treturn dict(aluno=Aluno, prova=Prova, Plano_de_Prova=PlanodeProva, Data_Final=str(Data2), Data_Aplicacao=str(Data1), total=str(total))\n\nresponse._vars=response._caller(resultado_prova)\n"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "C:\\cefet\\2009.2,2010.1\\LocalHostWeb2Py\\cefet-mestre\\web2py\\gluon\\restricted.py", line 171, in restricted\n    ccode = compile(code.replace(\'\\r\\n\', \'\\n\'), layer, \'exec\')\n  File "C:\\cefet\\2009.2,2010.1\\LocalHostWeb2Py\\cefet-mestre\\web2py\\applications\\Mestre/controllers/relatorios.py", line 34\n    return dict(msg=\'Nao e aluno\'))\n                                  ^\nSyntaxError: invalid syntax\n'
p8
s.